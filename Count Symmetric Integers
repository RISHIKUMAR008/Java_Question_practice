You are given two positive integers low and high.

An integer x consisting of 2 * n digits is symmetric if the sum of the first n digits of x is equal to the sum of the last n digits of x. Numbers with an odd number of digits are never symmetric.

Return the number of symmetric integers in the range [low, high].

 

Example 1:

Input: low = 1, high = 100
Output: 9
Explanation: There are 9 symmetric integers between 1 and 100: 11, 22, 33, 44, 55, 66, 77, 88, and 99.
Example 2:

Input: low = 1200, high = 1230
Output: 4
Explanation: There are 4 symmetric integers between 1200 and 1230: 1203, 1212, 1221, and 1230.






public class SymmetricIntegerCounter {

    public int countSymmetricIntegers(int low, int high) {
        int count = 0;

        for (int i = low; i <= high; i++) {
            String num = String.valueOf(i);
            int len = num.length();

            // Skip if number of digits is odd
            if (len % 2 != 0) continue;

            int mid = len / 2;
            int sum1 = 0, sum2 = 0;

            // Calculate sum of first half and second half digits
            for (int j = 0; j < mid; j++) {
                sum1 += num.charAt(j) - '0';
            }
            for (int j = mid; j < len; j++) {
                sum2 += num.charAt(j) - '0';
            }

            if (sum1 == sum2) count++;
        }

        return count;
    }

    // Example usage
    public static void main(String[] args) {
        SymmetricIntegerCounter counter = new SymmetricIntegerCounter();

        System.out.println(counter.countSymmetricIntegers(1, 100));      // Output: 9
        System.out.println(counter.countSymmetricIntegers(1200, 1230));  // Output: 4
    }
}
