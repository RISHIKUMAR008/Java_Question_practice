public class KthElementOfTwoSortedArrays {

    public static int findKthElement(int[] arr1, int[] arr2, int k) {
        int n1 = arr1.length;
        int n2 = arr2.length;
        if (n1 > n2) {
            return findKthElement(arr2, arr1, k);
        }

        int low = Math.max(0, k - n2), high = Math.min(k, n1);

        while (low <= high) {
            int i = (low + high) / 2;
            int j = k - i;
            int arr1Left = (i > 0) ? arr1[i - 1] : Integer.MIN_VALUE;
            int arr1Right = (i < n1) ? arr1[i] : Integer.MAX_VALUE;
            int arr2Left = (j > 0) ? arr2[j - 1] : Integer.MIN_VALUE;
            int arr2Right = (j < n2) ? arr2[j] : Integer.MAX_VALUE;
            if (arr1Left <= arr2Right && arr2Left <= arr1Right) {
                return Math.max(arr1Left, arr2Left);
            }
            else if (arr1Left > arr2Right) {
                high = i - 1;
            } else {
                low = i + 1;
            }
        }

        return -1; 
    }

    public static void main(String[] args) {
        int[] arr1 = {2, 3, 6, 7, 9};
        int[] arr2 = {1, 4, 8, 10};
        int k = 5;

        int result = findKthElement(arr1, arr2, k);
        System.out.println("The " + k + "-th element in the merged array is: " + result);
    }
}









public class KthElement {
    public static int kth(int[] arr1, int start1, int end1, int[] arr2, int start2, int end2, int k) {
        if (start1 == end1) {
            return arr2[start2 + k];
        }
        if (start2 == end2) {
            return arr1[start1 + k];
        }
        int mid1 = (start1 + end1) / 2;
        int mid2 = (start2 + end2) / 2;
        if (mid1 - start1 + mid2 - start2 < k) {
            if (arr1[mid1] > arr2[mid2]) {
                return kth(arr1, start1, end1, arr2, mid2 + 1, end2, k - (mid2 - start2) - 1);
            } else {
                return kth(arr1, mid1 + 1, end1, arr2, start2, end2, k - (mid1 - start1) - 1);
            }
        } else {
            if (arr1[mid1] > arr2[mid2]) {
                return kth(arr1, start1, mid1, arr2, start2, end2, k);
            } else {
                return kth(arr1, start1, end1, arr2, start2, mid2, k);
            }
        }
    }

    public static void main(String[] args) {
        int[] arr1 = {2, 3, 6, 7, 9};
        int[] arr2 = {1, 4, 8, 10};
        int k = 5;
        System.out.println(kth(arr1, 0, arr1.length, arr2, 0, arr2.length, k - 1));
    }
}





