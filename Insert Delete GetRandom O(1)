Implement the RandomizedSet class:

RandomizedSet() Initializes the RandomizedSet object.
bool insert(int val) Inserts an item val into the set if not present. Returns true if the item was not present, false otherwise.
bool remove(int val) Removes an item val from the set if present. Returns true if the item was present, false otherwise.
int getRandom() Returns a random element from the current set of elements (it's guaranteed that at least one element exists when this method is called). Each element must have the same probability of being returned.
You must implement the functions of the class such that each function works in average O(1) time complexity.

 

Example 1:

Input
["RandomizedSet", "insert", "remove", "insert", "getRandom", "remove", "insert", "getRandom"]
[[], [1], [2], [2], [], [1], [2], []]
Output
[null, true, false, true, 2, true, false, 2]



import java.util.ArrayList;
import java.util.HashMap;
import java.util.Map;
import java.util.Random;

class RandomizedSet {
    private ArrayList<Integer> values;    // ArrayList to store the values
    private Map<Integer, Integer> map;    // HashMap to store value -> index mapping
    private Random random;                // Random object for getRandom

    public RandomizedSet() {
        values = new ArrayList<>();
        map = new HashMap<>();
        random = new Random();
    }

    public boolean insert(int val) {
        if (map.containsKey(val)) {
            return false;  // Value already exists, return false
        }
        map.put(val, values.size());  // Map value to the current size (index)
        values.add(val);              // Add value to the end of the ArrayList
        return true;
    }

    public boolean remove(int val) {
        if (!map.containsKey(val)) {
            return false;  // Value not present, return false
        }
        // Get the index of the element to be removed
        int index = map.get(val);
        int lastElement = values.get(values.size() - 1);

        // Swap the last element with the element to remove
        values.set(index, lastElement);
        map.put(lastElement, index);

        // Remove the last element
        values.remove(values.size() - 1);
        map.remove(val);

        return true;
    }

    public int getRandom() {
        int randomIndex = random.nextInt(values.size());  // Generate a random index
        return values.get(randomIndex);                   // Return the element at that index
    }
}
